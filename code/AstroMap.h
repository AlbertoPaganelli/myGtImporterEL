// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `AstroMap.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="AgileEvtMap", key="double", value="Astro::agileEvt"
// name="AgileLogMap", key="double", value="Astro::agileLog"

#ifndef __AstroMap_h__
#define __AstroMap_h__

#include <Freeze/Map.h>
#include "Astro.h"
#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

class AgileEvtMapKeyCodec
{
public:

    static void write(::Ice::Double, Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static void read(::Ice::Double&, const Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static const std::string& typeId();
};

class AgileEvtMapValueCodec
{
public:

    static void write(const ::Astro::agileEvt&, Freeze::Value&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static void read(::Astro::agileEvt&, const Freeze::Value&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static const std::string& typeId();
};

typedef Freeze::Map< ::Ice::Double, ::Astro::agileEvt, AgileEvtMapKeyCodec, AgileEvtMapValueCodec, Freeze::IceEncodingCompare > AgileEvtMap;

class AgileLogMapKeyCodec
{
public:

    static void write(::Ice::Double, Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static void read(::Ice::Double&, const Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static const std::string& typeId();
};

class AgileLogMapValueCodec
{
public:

    static void write(const ::Astro::agileLog&, Freeze::Value&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static void read(::Astro::agileLog&, const Freeze::Value&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static const std::string& typeId();
};

typedef Freeze::Map< ::Ice::Double, ::Astro::agileLog, AgileLogMapKeyCodec, AgileLogMapValueCodec, Freeze::IceEncodingCompare > AgileLogMap;

#endif
